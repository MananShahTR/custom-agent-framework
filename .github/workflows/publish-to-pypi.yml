# Storm Agent PyPI Publishing Workflow
# This workflow will test, build, and upload the storm-agent package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: 🚀 Publish Storm Agent to PyPI

on:
  release:
    types: [published]
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  # Run tests and validation before building
  test-and-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          # Install package in development mode with optional dependencies
          pip install -e ".[dev]" || pip install -e .

      - name: 🧪 Run package validation script
        run: |
          if [ -f "scripts/test_package.py" ]; then
            python scripts/test_package.py
          else
            echo "Package validation script not found, skipping..."
          fi

      - name: 🔍 Validate package structure
        run: |
          # Check if main package files exist
          python -c "import storm_agent; print(f'Storm Agent version: {storm_agent.__version__}')" || echo "Warning: Could not import storm_agent"
          
          # Verify package structure
          test -f "src/storm_agent/__init__.py" || { echo "Missing __init__.py"; exit 1; }
          test -f "pyproject.toml" || { echo "Missing pyproject.toml"; exit 1; }
          test -f "README.md" || { echo "Missing README.md"; exit 1; }
          test -f "LICENSE" || { echo "Missing LICENSE"; exit 1; }
          
          echo "✅ Package structure validation passed"

      - name: 🔧 Check import paths in examples
        run: |
          # Test that examples can import the package correctly
          for example in examples/*.py; do
            if [ -f "$example" ]; then
              echo "Checking imports in $example..."
              python -m py_compile "$example" || echo "Warning: $example has import issues"
            fi
          done

  # Build the package
  build-package:
    runs-on: ubuntu-latest
    needs: test-and-validate

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 📦 Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: 🏗️ Build source and wheel distributions
        run: |
          echo "Building storm-agent package distributions..."
          python -m build
          
          # List built files
          echo "Built distributions:"
          ls -la dist/

      - name: 🔍 Verify distributions
        run: |
          # Check the built distributions
          echo "Verifying built distributions..."
          python -m twine check dist/*
          
          # Display package info
          echo "Package contents:"
          if ls dist/*.whl 1> /dev/null 2>&1; then
            python -m zipfile -l dist/*.whl | head -20
          fi

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storm-agent-distributions
          path: dist/
          retention-days: 7

  # Publish to PyPI
  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: build-package
    
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: read

    # Use environment protection for PyPI publishing
    environment:
      name: pypi
      url: https://pypi.org/project/storm-agent/

    # Only run on actual releases, not manual workflow dispatch to test PyPI
    if: github.event_name == 'release' && !inputs.test_pypi

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: storm-agent-distributions
          path: dist/

      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          print-hash: true

      - name: 🎉 Publication success
        run: |
          echo "✅ Storm Agent successfully published to PyPI!"
          echo "📦 Package available at: https://pypi.org/project/storm-agent/"
          echo "💫 Install with: pip install storm-agent"

  # Optional: Publish to Test PyPI for testing
  publish-to-test-pypi:
    runs-on: ubuntu-latest
    needs: build-package
    
    permissions:
      id-token: write
      contents: read

    environment:
      name: test-pypi
      url: https://test.pypi.org/project/storm-agent/

    # Only run when manually triggered with test_pypi flag
    if: inputs.test_pypi

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: storm-agent-distributions
          path: dist/

      - name: 🧪 Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          print-hash: true

      - name: 🧪 Test PyPI publication success
        run: |
          echo "✅ Storm Agent successfully published to Test PyPI!"
          echo "📦 Package available at: https://test.pypi.org/project/storm-agent/"
          echo "🧪 Install with: pip install -i https://test.pypi.org/simple/ storm-agent"

  # Create GitHub release assets
  create-release-assets:
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'release'

    permissions:
      contents: write

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: storm-agent-distributions
          path: dist/

      - name: 📎 Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 